name: MiddleEarth Release Excel

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-xlsx:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          # ⬇️ Cover root and subfolders (adjust paths if you know the exact location)
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt

      - name: Locate requirements.txt
        id: find-req
        run: |
          # Prefer root; else first match under subfolders
          if [ -f requirements.txt ]; then
            echo "path=requirements.txt" >> $GITHUB_OUTPUT
          else
            REQ=$(git ls-files '**/requirements.txt' | head -n 1)
            if [ -n "$REQ" ]; then
              echo "path=$REQ" >> $GITHUB_OUTPUT
            else
              echo "No requirements.txt found" >&2
              exit 1
            fi
          fi
          echo "Using requirements at: $(cat $GITHUB_OUTPUT)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r "${{ steps.find-req.outputs.path }}"

      - name: Verify Python + pandas
        run: |
          echo "Python executable: $(python -c 'import sys; print(sys.executable)')"
          python - << 'PY'
import sys, pkgutil
print("Python version:", sys.version)
print("Has pandas? ->", pkgutil.find_loader("pandas") is not None)
import pandas as pd
print("pandas version:", pd.__version__)
PY

      - name: Run MiddleEarth conversion script
        run: |
          python "Conversion Script/script_middleearth.py"

      - name: Upload Excel to release
        uses: softprops/action-gh-release@v2
        with:
          files: Output/output_excel/RegularParametersMiddleEarth.xlsx
          tag_name: ${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
